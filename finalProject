{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"finalProject","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"lckZKuuJy4vt","colab_type":"code","colab":{}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ackn6RxJzXFm","colab_type":"code","outputId":"d9f92f2d-f5cd-44d7-84b2-0b34bd1558ba","executionInfo":{"status":"ok","timestamp":1575489026699,"user_tz":360,"elapsed":8330,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":252}},"source":["validationRatio = .1\n","\n","transform = torchvision.transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])\n","\n","mnist = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform = transform)\n","\n","trainSize = int((1.0 - validationRatio) * len(mnist))\n","validationSize = int(validationRatio * len(mnist))\n","\n","trainData, validationData = torch.utils.data.dataset.random_split(mnist, [trainSize, validationSize])\n","\n","trainLoader = torch.utils.data.DataLoader(trainData, batch_size=500, shuffle=True)\n","validLoader = torch.utils.data.DataLoader(validationData, batch_size=500, shuffle=True)\n","classes = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./data/MNIST/raw/train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["9920512it [00:03, 3266448.40it/s]                            \n"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/train-images-idx3-ubyte.gz to ./data/MNIST/raw\n"],"name":"stdout"},{"output_type":"stream","text":["\r0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./data/MNIST/raw/train-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["32768it [00:00, 47592.76it/s]                           \n","0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/train-labels-idx1-ubyte.gz to ./data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["1654784it [00:02, 781091.21it/s]                             \n","0it [00:00, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/t10k-images-idx3-ubyte.gz to ./data/MNIST/raw\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["8192it [00:00, 17963.69it/s]            "],"name":"stderr"},{"output_type":"stream","text":["Extracting ./data/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/MNIST/raw\n","Processing...\n","Done!\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"5EhSGxzUz9-H","colab_type":"code","outputId":"bd6f00f0-9f6c-4727-bca9-0eef155331c2","executionInfo":{"status":"ok","timestamp":1575489028101,"user_tz":360,"elapsed":1400,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":168}},"source":["print(mnist)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Dataset MNIST\n","    Number of datapoints: 60000\n","    Root location: ./data\n","    Split: Train\n","    StandardTransform\n","Transform: Compose(\n","               ToTensor()\n","               Normalize(mean=(0.1307,), std=(0.3081,))\n","           )\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bDpzSKuUPyUA","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","\n","def imshow(img):\n","    #img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    #plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","    plt.imshow(img)\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jNvzdr76OtTo","colab_type":"code","colab":{}},"source":["examples = enumerate(trainLoader)\n","id, (im, label) = next(examples)\n","print(label[0])\n","imshow(im[0][0])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8RXil_WjTBfw","colab_type":"code","colab":{}},"source":["import torch.nn as nn\n","import torch.nn.functional as f\n","\n","class Net(nn.Module):\n","  def __init__(self):\n","    super(Net, self).__init__()\n","    self.conv1 = nn.Conv2d(1, 10, kernel_size = 3, stride = 1, padding = 1)\n","    self.conv2 = nn.Conv2d(10, 20, kernel_size = 3, stride = 1, padding = 1)\n","    self.max1 = nn.MaxPool2d(kernel_size = 3, stride = None, padding = 1)\n","    self.conv3 = nn.Conv2d(20, 40, kernel_size = 3, stride = 1, padding = 1)\n","    self.conv4 = nn.Conv2d(40, 60, kernel_size = 3, stride = 1, padding = 1)\n","    self.max2 = nn.MaxPool2d(kernel_size = 3, stride = None, padding = 1)\n","    self.lin1 = nn.Linear(60 * 4 * 4, 512)\n","    self.lin2 = nn.Linear(512, 10)\n","\n","  def forward(self, x):\n","    x = f.relu(self.conv1(x))\n","    #print('conv1: ', x.size())\n","    x = f.relu(self.conv2(x))\n","    #print('conv2: ', x.size())\n","    x = self.max1(x)\n","    #print('pool1: ', x.size())\n","    x = f.relu(self.conv3(x))\n","    #print('conv3: ', x.size())\n","    x = f.relu(self.conv4(x))\n","    #print('conv4', x.size())\n","    x = self.max2(x)\n","    #print('pool2: ', x.size())\n","    x = x.view(-1, 60 * 4 * 4)\n","    #print('reshape: ', x.size())\n","    x = f.relu(self.lin1(x))\n","    #print('lin1: ', x.size())\n","    x = f.relu(self.lin2(x))\n","    #print('lin2: ', x.size())\n","    x = f.log_softmax(x)\n","    #print('softmax: ', x.size())\n","    return x"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iyAltf1Ec8Hm","colab_type":"code","outputId":"354f2017-3db6-4073-b247-1d9bca21067a","executionInfo":{"status":"ok","timestamp":1575493669772,"user_tz":360,"elapsed":1400,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cnn = Net()\n","print(sum([p.numel() for p in cnn.parameters()]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["527982\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tbPk9EwudKYr","colab_type":"code","colab":{}},"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(cnn.parameters(), lr = .001)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_FAMExcidZxZ","colab_type":"code","outputId":"a2b420b0-83bc-4bb5-dc6b-092c9e2a86f7","executionInfo":{"status":"ok","timestamp":1575493671738,"user_tz":360,"elapsed":535,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)\n","cnn.to(device)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["cuda:0\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["Net(\n","  (conv1): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (conv2): Conv2d(10, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (max1): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)\n","  (conv3): Conv2d(20, 40, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (conv4): Conv2d(40, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","  (max2): MaxPool2d(kernel_size=3, stride=3, padding=1, dilation=1, ceil_mode=False)\n","  (lin1): Linear(in_features=960, out_features=512, bias=True)\n","  (lin2): Linear(in_features=512, out_features=10, bias=True)\n",")"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"id":"6q1vwIuUdtIJ","colab_type":"code","outputId":"b6d0b37c-24f7-4fd2-e4f4-be8e66f703a7","executionInfo":{"status":"ok","timestamp":1575493753433,"user_tz":360,"elapsed":1444,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","dir = 'drive/My Drive/School Files/Senior/Fall/Machine Learning/finalProject/part2/mnist.pth'"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Lg-32J-reGNf","colab_type":"code","outputId":"874eedb6-92a1-4818-a3b3-9fef2fda3b3a","executionInfo":{"status":"ok","timestamp":1575493854616,"user_tz":360,"elapsed":95890,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":406}},"source":["import time\n","\n","start_time = time.time()\n","best_loss = np.float('inf')\n","\n","epochs = 10\n","\n","for epoch in range(epochs):\n","  \n","  running_loss = 0.0\n","\n","  for i, data in enumerate(trainLoader, 0):\n","    inputs, labels = data[0].to(device), data[1].to(device)\n","\n","    optimizer.zero_grad()\n","\n","    outputs = cnn(inputs)\n","    loss = criterion(outputs, labels)\n","    loss.backward()\n","    optimizer.step()\n","\n","    running_loss += loss.item()\n","  \n","  epoch_loss = running_loss / (i + 1)\n","  print(\"Epoch: \", epoch, \" train loss: \", '%.3f' % epoch_loss)\n","\n","  with torch.no_grad():\n","    \n","    running_loss = 0.0\n","\n","    for i , data in enumerate(validLoader, 0):\n","\n","      inputs, labels = data[0].to(device), data[1].to(device)\n","\n","      outputs = cnn(inputs)\n","      loss = criterion(outputs, labels)\n","\n","      running_loss += loss.item()\n","\n","    epoch_loss = running_loss / (i + 1)\n","    print(\"Epoch: \", epoch, \" validation loss: \", '%.3f' % epoch_loss)\n","\n","    if epoch_loss < best_loss:\n","      torch.save(cnn.state_dict(), dir)\n","      best_loss = epoch_loss\n","\n","time_elap = (time.time() - start_time) // 60\n","print('Finished Training in %d mins' % time_elap)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:35: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch:  0  train loss:  0.945\n","Epoch:  0  validation loss:  0.930\n","Epoch:  1  train loss:  0.932\n","Epoch:  1  validation loss:  0.919\n","Epoch:  2  train loss:  0.923\n","Epoch:  2  validation loss:  0.912\n","Epoch:  3  train loss:  0.918\n","Epoch:  3  validation loss:  0.910\n","Epoch:  4  train loss:  0.914\n","Epoch:  4  validation loss:  0.913\n","Epoch:  5  train loss:  0.908\n","Epoch:  5  validation loss:  0.920\n","Epoch:  6  train loss:  0.907\n","Epoch:  6  validation loss:  0.908\n","Epoch:  7  train loss:  0.903\n","Epoch:  7  validation loss:  0.908\n","Epoch:  8  train loss:  0.902\n","Epoch:  8  validation loss:  0.906\n","Epoch:  9  train loss:  0.901\n","Epoch:  9  validation loss:  0.905\n","Finished Training in 1 mins\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rXschemdft1N","colab_type":"code","outputId":"b6a1e9b5-8934-4cd6-88bb-56360e7cf460","executionInfo":{"status":"ok","timestamp":1575493861854,"user_tz":360,"elapsed":1417,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["cnn.load_state_dict(torch.load(dir))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"LxGz1zVBfz6S","colab_type":"code","outputId":"d8c022a3-941f-4179-b767-ec346a89d5b1","executionInfo":{"status":"error","timestamp":1575494846152,"user_tz":360,"elapsed":1452,"user":{"displayName":"Michael Wisnewski","photoUrl":"","userId":"08288731010122458134"}},"colab":{"base_uri":"https://localhost:8080/","height":370}},"source":["with torch.no_grad():\n","  id, (im, label) = next(examples)\n","  outputs = cnn(im)\n","  _, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]] for j in range(4)))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-93-7e0824375974>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m   \u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m   \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcnn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m   \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    539\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 541\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    542\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    543\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-80-16445a7bc378>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0;31m#print('conv1: ', x.size())\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m    539\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slow_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 541\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    542\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_forward_hooks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    543\u001b[0m             \u001b[0mhook_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv2d_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mConv3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_ConvNd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mconv2d_forward\u001b[0;34m(self, input, weight)\u001b[0m\n\u001b[1;32m    340\u001b[0m                             _pair(0), self.dilation, self.groups)\n\u001b[1;32m    341\u001b[0m         return F.conv2d(input, weight, self.bias, self.stride,\n\u001b[0;32m--> 342\u001b[0;31m                         self.padding, self.dilation, self.groups)\n\u001b[0m\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: Input type (torch.FloatTensor) and weight type (torch.cuda.FloatTensor) should be the same"]}]}]}